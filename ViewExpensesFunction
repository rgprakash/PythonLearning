import datetime

def get_valid_date():
    """
    Prompts the user to enter a date and validates the input.

    Returns:
        datetime.date: The date entered by the user.  Returns None on error.
    """
    while True:
        date_str = input("Enter date (YYYY-MM-DD): ")
        try:
            return datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            print("Invalid date format. Please use YYYY-MM-DD.")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            return None

def get_valid_amount():
    """
    Prompts the user to enter an amount and validates the input.

    Returns:
        float: The amount entered by the user. Returns None on error.
    """
    while True:
        amount_str = input("Enter amount: ")
        try:
            amount = float(amount_str)
            if amount > 0:
                return amount
            else:
                print("Amount must be greater than zero.")
        except ValueError:
            print("Invalid amount format. Please enter a number.")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            return None

def get_valid_category(categories):
    """
    Prompts the user to enter a category and validates the input.

    Args:
        categories (list): A list of valid expense categories.

    Returns:
        str: The category entered by the user. Returns None on error.
    """
    if not categories:
        print("No categories available. Please set up categories first.")
        return None

    while True:
        print("Available Categories:", ", ".join(categories))
        category = input("Enter category: ")
        if category in categories:
            return category
        else:
            print("Invalid category. Please choose from the list.")

def add_expense(expenses, categories):
    """
    Adds a new expense to the list of expenses.

    Args:
        expenses (list): The list of expenses.
        categories (list): The list of valid expense categories.
    """
    date = get_valid_date()
    if date is None:
        print("Failed to add expense: Invalid date.")
        return

    amount = get_valid_amount()
    if amount is None:
        print("Failed to add expense: Invalid amount.")
        return

    category = get_valid_category(categories)
    if category is None:
        print("Failed to add expense: Invalid category.")
        return

    description = input("Enter description: ")
    expense = {"date": date.isoformat(), "amount": amount, "category": category, "description": description}
    expenses.append(expense)
    print("Expense added successfully.")



def view_expenses(expenses):
    """
    Retrieves and displays all stored expenses with validation.

    Args:
        expenses (list): The list of expenses.
    """
    if not expenses:
        print("No expenses to display.")
        return

    print("\n--- All Expenses ---")
    for expense in expenses:
        # Validate that all required keys are present and their values are not None
        if all(key in expense and expense[key] is not None for key in ["date", "category", "amount", "description"]):
            try:
                # Attempt to convert the date string to a date object for display
                display_date = datetime.datetime.strptime(expense['date'], "%Y-%m-%d").date()
                print(
                    f"Date: {display_date}, "
                    f"Category: {expense['category']}, "
                    f"Amount: {expense['amount']}, "
                    f"Description: {expense['description']}"
                )
            except ValueError:
                print(f"Skipping invalid date format: {expense}")
        else:
            print("Skipping incomplete expense entry:", expense)

def main():
    """
    Main function to demonstrate the add_expense and view_expenses functions.
    """
    expenses = []
    categories = ["Food", "Housing", "Transportation", "Entertainment", "Utilities", "Other"]
    # Add some initial expenses for testing
    add_expense(expenses, categories)
    add_expense(expenses, categories)
    add_expense(expenses, categories)
    view_expenses(expenses)  # Call view_expenses to display the added expenses

if __name__ == "__main__":
    main()
